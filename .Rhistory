library(stringr)
library(stringr)
str_split_fixed("!@#$%/,.;:-_*=+?",1)
str_split_fixed("!@#$%/,.;:-_*=+?","")
str_split_fixed("!@#$%/,.;:-_*=+?","",n=1)
merkit <- "!@#$%/,.;:-_*=+?"
special <- str_split_fixed(merkit,"",n=nchar(merkit))
special
merkit <- "!@#$%/,.;:-_*=+?"
special <- as.vector(str_split_fixed(merkit,"",n=nchar(merkit)))
special
sample(x=3:4,size=1,replace=TRUE)
sample(x=3:4,size=1,replace=TRUE)
rmultinom
rmultinom(n=1,size=1,prob=c(0.25,0.25,0.25,0.25))
sample(1:4,size=3,replace=FALSE)
sample(1:4,size=mt,replace=FALSE)
# Montako merkkityyppiä valitaan (oltava 3 tai 4)
mt <- sample(x=3:4,size=1,replace=TRUE)
sample(1:4,size=mt,replace=FALSE)
# Montako merkkityyppiä valitaan (oltava 3 tai 4)
mt <- sample(x=3:4,size=1,replace=TRUE)
sample(1:4,size=mt,replace=FALSE)
mt <- sample(x=3:4,size=1,replace=TRUE)
sample(1:4,size=mt,replace=FALSE)
mt <- sample(x=3:4,size=1,replace=TRUE)
sample(1:4,size=mt,replace=FALSE)
#arvotaan luvut, 1-n montako kutakin merkkityyppiä arvotaan
# salasanan pituus n=10
n <- 10
mt2
mt2
# Montako merkkityyppiä valitaan (oltava 3 tai 4)
mt <- sample(x=3:4,size=1,replace=TRUE)
# Mitkä merkkityypit valitaan
mt2 <- sample(1:4,size=mt,replace=FALSE)
mt2
# Mitkä merkkityypit valitaan
mt2 <- sample(1:4,size=mt,replace=FALSE)
sort(mt2)
rmultinom(n=1, size=n, prob=0.1)
rmultinom(n=1, size=n, prob=0.1)
rmultinom(n=1, size=n, prob=rep(0.1,10))
sample(c(letters,LETTERS,0:9,merkit),10-length(mt2),replace=TRUE)
list(letters,LETTERS,0:9,merkit)
list(letters,LETTERS,0:9,special)
list(letters,LETTERS,paste0(0:9),special)
l <- list(letters,LETTERS,paste0(0:9),special)
sample(as.vector(l),10-length(mt2),replace=TRUE)
c(l)
Reduce(l,c)
l <- list(letters,LETTERS,paste0(0:9),special)
Reduce(l,c)
Reduce(c,l)
l <- list(letters,LETTERS,paste0(0:9),special)
sample(Reduce(c,l),10-length(mt2),replace=TRUE)
extra6_or_7 <- sample(Reduce(c,l),10-length(mt2),replace=TRUE)
length(l)
lapply(l,length)
pit <- lapply(l,length)
pit <- Reduce(c,lapply(l,length))
pit
pit/sum(pit)
sort(mt2)
l[mt2]
l[mt2][1]
l[mt2][[1]]
sample(x=l[mt2][[1]],size = 1)
sample(x=l[mt2][[1]],size = 1)
first3_or_4 <- vector("character",length(l[mt2]))
first3_or_4
first3_or_4 <- vector("character",length(l[mt2]))
first3_or_4
for(i in 1:length(l[mt2])) {
first3_or_4[i] <- sample(x=l[mt2][[1]],size = 1) # arvo yksi
}
first3_or_4
first3_or_4 <- vector("character",length(l[mt2]))
first3_or_4
for(i in 1:length(l[mt2])) {
first3_or_4[i] <- sample(x=l[mt2][[i]],size = 1) # arvo yksi
}
first3_or_4
pit <- Reduce(c,lapply(l,length))
pit
extra6_or_7 <- sample(Reduce(c,l),10-length(mt2),replace=TRUE)
c(first3_or_4,extra6_or_7)
final <- c(first3_or_4,extra6_or_7)
final
sample(final, size = length(final))
sample(final, size = length(final))
# salasana-generaattori
library(stringr)
#arvotaan luvut, 1-n montako kutakin merkkityyppiä arvotaan
# salasanan pituus n=10
generate_password <- function(n=10) {
merkit <- "!@#$%/,.;:-_*=+?"
special <- as.vector(str_split_fixed(merkit,"",n=nchar(merkit)))
#special
# Montako merkkityyppiä valitaan (oltava 3 tai 4)
mt <- sample(x=3:4,size=1,replace=TRUE)
# Mitkä merkkityypit valitaan
mt2 <- sample(1:4,size=mt,replace=FALSE)
#sort(mt2)
# oltava 3 tai 4 yhteensä (ekat arvonnat), loput 7 tai 6 voidaan ottaa vapaasti
l <- list(letters,LETTERS,paste0(0:9),special)
#l[mt2]
first3_or_4 <- vector("character",length(l[mt2]))
#first3_or_4
for(i in 1:length(l[mt2])) {
first3_or_4[i] <- sample(x=l[mt2][[i]],size = 1) # arvo yksi
}
#first3_or_4
pit <- Reduce(c,lapply(l,length))
#pit
extra6_or_7 <- sample(Reduce(c,l),10-length(mt2),replace=TRUE)
final <- c(first3_or_4,extra6_or_7)
#final
sample(final, size = length(final))
}
generate_password(10)
generate_password(10)
generate_password(10)
generate_password <- function(n=10,...) {
merkit <- "!@#$%/,.;:-_*=+?"
special <- as.vector(str_split_fixed(merkit,"",n=nchar(merkit)))
#special
# Montako merkkityyppiä valitaan (oltava 3 tai 4)
mt <- sample(x=3:4,size=1,replace=TRUE)
# Mitkä merkkityypit valitaan
mt2 <- sample(1:4,size=mt,replace=FALSE)
#sort(mt2)
# oltava 3 tai 4 yhteensä (ekat arvonnat), loput 7 tai 6 voidaan ottaa vapaasti
l <- list(letters,LETTERS,paste0(0:9),special)
#l[mt2]
first3_or_4 <- vector("character",length(l[mt2]))
#first3_or_4
for(i in 1:length(l[mt2])) {
first3_or_4[i] <- sample(x=l[mt2][[i]],size = 1) # arvo yksi
}
#first3_or_4
pit <- Reduce(c,lapply(l,length))
#pit
extra6_or_7 <- sample(Reduce(c,l),10-length(mt2),replace=TRUE)
final <- c(first3_or_4,extra6_or_7)
#final
paste(sample(final, size = length(final)),...)
}
generate_password(10,collase=" ")
generate_password(10,collapse=" ")
sapply(X = rep(10,10),generate_password,collapse=" ")
sapply(X = rep(10,10),generate_password,collapse=" ")
getwd()
setwd("~/Opetus/Biolääketiede/labs/seqda2_material")
knitr::opts_chunk$set(echo = TRUE)
setwd("/home/jukop/Opetus/Biolääketiede/labs/seqda2_material/")
summary(cars)
plot(pressure)
Xsingular <- matrix(c(1:2,3*(1:2)),ncol=2,nrow=2)
solve(X)
?crossprod
Z <- matrix(??, nrow=2, ncol=2)
knitr::opts_chunk$set(echo = TRUE)
setwd("/home/jukop/Opetus/Biolääketiede/labs/seqda2_material/")
summary(cars)
plot(pressure)
downdat <- data.frame(Age = c(rep(c("<35","<35",">=35",">=35"),c(344, 84, 80, 201)),
rep(c("<35","<35",">=35",">=35"),c(59, 18, 56, 158))),
Smoke = c(rep(c(1,1,1,1),c(344, 84, 80, 201)),
rep(c(2,2,2,2),c(59, 18, 56, 158))),
Y = c(rep(c(0,1,0,1),c(344, 84, 80, 201)),
rep(c(0,1,0,1),c(59, 18, 56, 158)))
)
#downdat_small <- downdat[c(1:2,345:346,429:430,509:510,710:711,769:770,787:788,843:844),]
#downdat_small <- downdat[c(1,345,429,509,710,769,787,843),]
downdat_small <- unique(downdat)
knitr::kable(downdat_small)
model.matrix(~ Smoke, data=downdat_small)
attach(downdat)
table(Smoke,Y)
table(Smoke,Y,Age)
Xsingular <- matrix(c(1:2,3*(1:2)),ncol=2,nrow=2)
solve(X)
#solve(X)
solve(Xsingular + 0.1*diag(2))
Xsingular <- matrix(c(1:2,3*(1:2)),ncol=2,nrow=2)
#solve(X)
solve(Xsingular + 0.1*diag(2))
solve(Xsingular + 0.01*diag(2))
solve(Xsingular + 0.001*diag(2))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
setwd("/home/jukop/Opetus/Biolääketiede/labs/seqda2_material/")
# a)
beta <- c(52, 0.55)
X <- matrix(1:4,ncol=2,nrow=2)
beta
X
load(file="father_and_son.Rdata")
View(father.son)
solve(t(Xfs) %*% Xfs)
load(file="father_and_son.Rdata")
# fit a linear model
fit <- lm(?? ~ ??, data=??)
summary(fit)
# use matrix algebra
y <- father.son$sheight
Xfs <- cbind(1, father.son$fheight)
solve(t(Xfs) %*% Xfs)
# a)
beta <- c(52, 0.55)
X <- matrix(1:4,ncol=2,nrow=2)
X <- matrix(c(1,2,3,4),ncol=2,nrow=2)
beta
X
?matrix
# b)
beta %*% X
# b)
X %*% beta
beta %*% X
# c)
t(beta) %*% t(X)
# d)
Xsingular <- matrix(c(1:2,3*(1:2)),ncol=2,nrow=2)
Xsingular
crossprod(1:5,6:10) # crossprod for vectors
1:5 %*% 6:10
c(1:5) %*% c(6:10) # correct
crossprod(X,Xsingular)
X %*% Xsingular
t(X) %*% Xsingular
# example of diag
diag(4)
beta * X
beta * X[1,]
beta * X
beta * X[1,]
beta * X
beta * X[1,]
beta * X
beta * X[,1]
beta
X
beta * X
beta * X[,2]
Xsingular <- matrix(c(1:2,3*(1:2)),ncol=2,nrow=2)
X
solve(X)
solve(Xsingular)
solve(Xsingular + 0.1*diag(2))
diag(2)
0.1*diag(2)
solve(Xsingular + 0.1*diag(2))
solve(Xsingular + 0.01*diag(2))
solve(Xsingular + 0.001*diag(2))
solve(Xsingular + 0.000001*diag(2))
Xsingular
Xsingular <- matrix(c(1:2,3*(1:2)),ncol=2,nrow=2)
ZZ <- Xsingular + 0.3*diag(2)
plot(0,0, xlim=c(-1,7),ylim=c(-1,7),xlab="",ylab="")
arrows(0,0,ZZ[1,1],ZZ[2,1])
arrows(0,0,ZZ[1,2],ZZ[2,2],col="red",lty=2)
ZZ2 <- Xsingular + 0.1*diag(2)
plot(0,0, xlim=c(-1,7),ylim=c(-1,7),xlab="",ylab="")
arrows(0,0,ZZ2[1,1],ZZ2[2,1])
arrows(0,0,ZZ2[1,2],ZZ2[2,2],col="red",lty=2)
ZZ3 <- Xsingular + 0.01*diag(2)
plot(0,0, xlim=c(-1,7),ylim=c(-1,7),xlab="",ylab="")
arrows(0,0,ZZ3[1,1],ZZ3[2,1])
arrows(0,0,ZZ3[1,2],ZZ3[2,2],col="red",lty=2)
Xsingular <- matrix(c(1:2,3*(1:2)),ncol=2,nrow=2)
ZZ <- Xsingular + 0.1*diag(2)
plot(0,0, xlim=c(-1,7),ylim=c(-1,7),xlab="",ylab="")
arrows(0,0,ZZ[1,1],ZZ[2,1])
arrows(0,0,ZZ[1,2],ZZ[2,2],col="red",lty=2)
ZZ2 <- Xsingular + 0.01*diag(2)
plot(0,0, xlim=c(-1,7),ylim=c(-1,7),xlab="",ylab="")
arrows(0,0,ZZ2[1,1],ZZ2[2,1])
arrows(0,0,ZZ2[1,2],ZZ2[2,2],col="red",lty=2)
ZZ3 <- Xsingular + 0.001*diag(2)
plot(0,0, xlim=c(-1,7),ylim=c(-1,7),xlab="",ylab="")
arrows(0,0,ZZ3[1,1],ZZ3[2,1])
arrows(0,0,ZZ3[1,2],ZZ3[2,2],col="red",lty=2)
Xsingular <- matrix(c(1:2,3*(1:2)),ncol=2,nrow=2)
ZZ <- Xsingular + 0.3*diag(2)
plot(0,0, xlim=c(-1,7),ylim=c(-1,7),xlab="",ylab="")
arrows(0,0,ZZ[1,1],ZZ[2,1])
arrows(0,0,ZZ[1,2],ZZ[2,2],col="red",lty=2)
ZZ2 <- Xsingular + 0.1*diag(2)
plot(0,0, xlim=c(-1,7),ylim=c(-1,7),xlab="",ylab="")
arrows(0,0,ZZ2[1,1],ZZ2[2,1])
arrows(0,0,ZZ2[1,2],ZZ2[2,2],col="red",lty=2)
ZZ3 <- Xsingular + 0.01*diag(2)
plot(0,0, xlim=c(-1,7),ylim=c(-1,7),xlab="",ylab="")
arrows(0,0,ZZ3[1,1],ZZ3[2,1])
arrows(0,0,ZZ3[1,2],ZZ3[2,2],col="red",lty=2)
Z <- matrix(c(1,1,1,1), nrow=2, ncol=2)
# test your solution with R. R will print error message "system is exactly singular" if you succeed.
t(Z) %*% Z
# test your solution with R. R will print error message "system is exactly singular" if you succeed.
solve(t(Z) %*% Z)
knitr::opts_chunk$set(echo = TRUE)
setwd("/home/jukop/Opetus/Biolääketiede/labs/seqda2_material/")
summary(cars)
plot(pressure)
Xsingular <- matrix(c(1:2,3*(1:2)),ncol=2,nrow=2)
ZZ <- Xsingular + 0.3*diag(2)
plot(0,0, xlim=c(-1,7),ylim=c(-1,7),xlab="",ylab="")
arrows(0,0,ZZ[1,1],ZZ[2,1])
arrows(0,0,ZZ[1,2],ZZ[2,2],col="red",lty=2)
ZZ2 <- Xsingular + 0.1*diag(2)
plot(0,0, xlim=c(-1,7),ylim=c(-1,7),xlab="",ylab="")
arrows(0,0,ZZ2[1,1],ZZ2[2,1])
arrows(0,0,ZZ2[1,2],ZZ2[2,2],col="red",lty=2)
ZZ3 <- Xsingular + 0.01*diag(2)
plot(0,0, xlim=c(-1,7),ylim=c(-1,7),xlab="",ylab="")
arrows(0,0,ZZ3[1,1],ZZ3[2,1])
arrows(0,0,ZZ3[1,2],ZZ3[2,2],col="red",lty=2)
knitr::opts_chunk$set(echo = TRUE)
setwd("/home/jukop/Opetus/Biolääketiede/labs/seqda2_material/")
summary(cars)
plot(pressure)
Xsingular <- matrix(c(1:2,3*(1:2)),ncol=2,nrow=2)
ZZ <- Xsingular + 0.3*diag(2)
plot(0,0, xlim=c(-1,7),ylim=c(-1,7),xlab="",ylab="")
arrows(0,0,ZZ[1,1],ZZ[2,1])
arrows(0,0,ZZ[1,2],ZZ[2,2],col="red",lty=2)
ZZ2 <- Xsingular + 0.1*diag(2)
plot(0,0, xlim=c(-1,7),ylim=c(-1,7),xlab="",ylab="")
arrows(0,0,ZZ2[1,1],ZZ2[2,1])
arrows(0,0,ZZ2[1,2],ZZ2[2,2],col="red",lty=2)
ZZ3 <- Xsingular + 0.01*diag(2)
plot(0,0, xlim=c(-1,7),ylim=c(-1,7),xlab="",ylab="")
arrows(0,0,ZZ3[1,1],ZZ3[2,1])
arrows(0,0,ZZ3[1,2],ZZ3[2,2],col="red",lty=2)
# fit a linear model
fsmodel <- lm(sheight ~ fheight, data=father.son)
load(file="father_and_son.Rdata")
# fit a linear model
fsmodel <- lm(sheight ~ fheight, data=father.son)
summary(fsmodel)
# use matrix algebra
y <- father.son$sheight
Xfs <- cbind(1, father.son$fheight)
beta <- solve(t(Xfs) %*% Xfs) %*% t(X) %*% y
# use matrix algebra
y <- father.son$sheight
Xfs <- cbind(1, father.son$fheight)
beta <- solve(t(Xfs) %*% Xfs) %*% t(X) %*% y
Xfs <- cbind(1, father.son$fheight)
beta <- solve(t(Xfs) %*% Xfs) %*% t(Xfs) %*% y
beta
summary(fsmodel)
?solve
downdat <- data.frame(Age = c(rep(c("<35","<35",">=35",">=35"),c(344, 84, 80, 201)),
rep(c("<35","<35",">=35",">=35"),c(59, 18, 56, 158))),
Smoke = c(rep(c(1,1,1,1),c(344, 84, 80, 201)),
rep(c(2,2,2,2),c(59, 18, 56, 158))),
Y = c(rep(c(0,1,0,1),c(344, 84, 80, 201)),
rep(c(0,1,0,1),c(59, 18, 56, 158)))
)
#downdat_small <- downdat[c(1:2,345:346,429:430,509:510,710:711,769:770,787:788,843:844),]
#downdat_small <- downdat[c(1,345,429,509,710,769,787,843),]
downdat_small <- unique(downdat)
knitr::kable(downdat_small)
model.matrix(~ Smoke, data=downdat_small)
View(downdat_small)
# a) one predictor: Smoke
model.matrix(~ Smoke, data=downdat_small)
model.matrix(~ factor(Smoke), data=downdat_small)
# b) one predictor: Age
model.matrix(~ Age, data=downdat_small)
model.matrix(~ factor(Age), data=downdat_small)
# c) one predictor: three groups
ageclass <- factor(c(1,1,2,2,3,3))
model.matrix(~ ageclass)
ageclass_new <- relevel(ageclass,2)
model.matrix(~ ageclass_new)
# d) main effects: Smoke and Age as categorical variables
model.matrix(~ factor(Smoke) + Age, data=downdat_small)
# e) interaction: add a term Smoke:Age in the formula
model.matrix(~ factor(Smoke) + Age + factor(Smoke):Age, data=downdat_small)
model.matrix(~ factor(Smoke)*Age, data=downdat_small)
downdat_small$Smoke <- factor(downdat_small$Smoke)
model.matrix(~ Smoke*Age, data=downdat_small)
attach(downdat)
table(Smoke,Y)
table(Smoke,Y,Age)
m1 <- lm(Y ~ factor(Smoke),data=downdat)
summary(m1)
m2 <- lm(Y ~ factor(Smoke) + Age + factor(Smoke):Age, data=downdat)
summary(m2) # no interaction, leave Smoke:Age out
m3 <- lm(Y ~ factor(Smoke) + Age, data=downdat)
summary(m3)
m4 <- lm(Y ~ Age, data=downdat)
summary(m4)
table(Smoke,Y)
table(Smoke,Y,Age)
